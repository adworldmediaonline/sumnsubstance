// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String?
  initials      String?
  sessions      Session[]
  accounts      Account[]
  orders        Order[]
  reviews       Review[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("category")
}

model Product {
  id               String   @id @default(cuid())
  name             String
  excerpt          String?  // Short description for listings/cards
  description      String?  // Full description for product details
  slug             String   @unique
  price            Decimal  @db.Decimal(10, 2)
  categoryId       String
  category         Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  mainImageUrl     String?
  mainImagePublicId String?
  mainImageAlt     String?
  additionalImages Json?    // Store array of image objects

  // New Content Fields
  tagline          String?  @db.Text // Short tagline
  whyLoveIt        String?  @db.Text // Rich text content
  whatsInside      String?  @db.Text // Rich text content
  howToUse         String?  @db.Text // Rich text content
  ingredients      String?  @db.Text // Rich text content

  // SEO Fields
  metaTitle        String?  // Max 60 chars
  metaDescription  String?  @db.Text // Max 160 chars
  metaKeywords     String?  @db.Text // Comma-separated keywords

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orderItems       OrderItem[]
  reviews          Review[]

  @@map("product")
}

// Order Management System
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique // Human-readable order number

  // Customer Information (supports both guest and authenticated users)
  userId          String?     // Optional for guest checkout
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  guestEmail      String?     // For guest orders
  guestName       String?     // For guest orders

  // Order Status
  status          OrderStatus @default(PENDING)

  // Financial Information
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  discount        Decimal     @db.Decimal(10, 2) @default(0)
  total           Decimal     @db.Decimal(10, 2)

  // Payment Information
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?     // razorpay, card, etc.
  razorpayOrderId String?     // Razorpay order ID
  razorpayPaymentId String?   // Razorpay payment ID
  razorpaySignature String?   // Razorpay signature for verification

  // Shipping Address
  shippingAddress Json        // Store complete address as JSON
  billingAddress  Json?       // Optional separate billing address

  // Order Items
  items           OrderItem[]

  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Order fulfillment
  shippedAt       DateTime?
  deliveredAt     DateTime?

  // Notes and tracking
  notes           String?     // Internal notes
  trackingNumber  String?     // Shipping tracking number

  @@map("order")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  // Item details (snapshot at time of order)
  name      String   // Product name at time of order
  price     Decimal  @db.Decimal(10, 2) // Price at time of order
  quantity  Int
  total     Decimal  @db.Decimal(10, 2) // price * quantity

  // Product snapshot for order history
  productSnapshot Json // Store product details at time of order

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_item")
}

// Enums for Order Management
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Review System
model Review {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String?  // Optional for guest reviews (if allowed)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Review Content
  rating      Int      // 1-5 stars
  title       String?  // Optional review title
  comment     String   @db.Text

  // Verification
  isVerifiedPurchase Boolean @default(false)
  orderId     String?  // Link to order for verification

  // Moderation
  status      ReviewStatus @default(PENDING)
  moderatedBy String?  // Admin who approved/rejected
  moderatedAt DateTime?

  // Helpful votes
  helpfulCount   Int @default(0)
  unhelpfulCount Int @default(0)

  // Media
  images      Json?    // Array of review images

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("review")
  @@index([productId])
  @@index([userId])
  @@index([status])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}
